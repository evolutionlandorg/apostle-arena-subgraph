// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class evoApostle extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save evoApostle entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save evoApostle entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("evoApostle", id.toString(), this);
  }

  static load(id: string): evoApostle | null {
    return store.get("evoApostle", id) as evoApostle | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get nftType(): string {
    let value = this.get("nftType");
    return value.toString();
  }

  set nftType(value: string) {
    this.set("nftType", Value.fromString(value));
  }

  get lastTxHash(): string {
    let value = this.get("lastTxHash");
    return value.toString();
  }

  set lastTxHash(value: string) {
    this.set("lastTxHash", Value.fromString(value));
  }

  get birthTime(): BigInt | null {
    let value = this.get("birthTime");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set birthTime(value: BigInt | null) {
    if (value === null) {
      this.unset("birthTime");
    } else {
      this.set("birthTime", Value.fromBigInt(value as BigInt));
    }
  }

  get talents(): string | null {
    let value = this.get("talents");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set talents(value: string | null) {
    if (value === null) {
      this.unset("talents");
    } else {
      this.set("talents", Value.fromString(value as string));
    }
  }

  get genes(): string | null {
    let value = this.get("genes");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set genes(value: string | null) {
    if (value === null) {
      this.unset("genes");
    } else {
      this.set("genes", Value.fromString(value as string));
    }
  }

  get generation(): string | null {
    let value = this.get("generation");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set generation(value: string | null) {
    if (value === null) {
      this.unset("generation");
    } else {
      this.set("generation", Value.fromString(value as string));
    }
  }

  get matronId(): string | null {
    let value = this.get("matronId");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set matronId(value: string | null) {
    if (value === null) {
      this.unset("matronId");
    } else {
      this.set("matronId", Value.fromString(value as string));
    }
  }

  get sireId(): string | null {
    let value = this.get("sireId");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set sireId(value: string | null) {
    if (value === null) {
      this.unset("sireId");
    } else {
      this.set("sireId", Value.fromString(value as string));
    }
  }
}

export class evoEquipment extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save evoEquipment entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save evoEquipment entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("evoEquipment", id.toString(), this);
  }

  static load(id: string): evoEquipment | null {
    return store.get("evoEquipment", id) as evoEquipment | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get object(): i32 {
    let value = this.get("object");
    return value.toI32();
  }

  set object(value: i32) {
    this.set("object", Value.fromI32(value));
  }

  get rarity(): i32 {
    let value = this.get("rarity");
    return value.toI32();
  }

  set rarity(value: i32) {
    this.set("rarity", Value.fromI32(value));
  }

  get level(): i32 {
    let value = this.get("level");
    return value.toI32();
  }

  set level(value: i32) {
    this.set("level", Value.fromI32(value));
  }

  get prefer(): i32 {
    let value = this.get("prefer");
    return value.toI32();
  }

  set prefer(value: i32) {
    this.set("prefer", Value.fromI32(value));
  }

  get apostleTokenId(): string | null {
    let value = this.get("apostleTokenId");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set apostleTokenId(value: string | null) {
    if (value === null) {
      this.unset("apostleTokenId");
    } else {
      this.set("apostleTokenId", Value.fromString(value as string));
    }
  }

  get slot(): i32 {
    let value = this.get("slot");
    return value.toI32();
  }

  set slot(value: i32) {
    this.set("slot", Value.fromI32(value));
  }

  get originOwner(): string | null {
    let value = this.get("originOwner");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set originOwner(value: string | null) {
    if (value === null) {
      this.unset("originOwner");
    } else {
      this.set("originOwner", Value.fromString(value as string));
    }
  }
}
